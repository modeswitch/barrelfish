--------------------------------------------------------------------------
-- Copyright (c) 2007-2011, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for kernel
-- 
--------------------------------------------------------------------------

let
    scheduler = case Config.scheduler of
                        Config.RR   -> "schedule_rr.c"
                        Config.RBED -> "schedule_rbed.c"
    microbench = if Config.microbenchmarks then ["microbenchmarks.c"] else []
    timer = if Config.oneshot_timer then ["timer.c"] else []
    indep_cfiles = [ "gdb_stub.c", "capabilities.c", "dispatch.c",
                     scheduler, "memset.c", "memmove.c", "printf.c",
                     "startup.c", "stdlib.c", "string.c", "syscall.c",
                     "wakeup.c" ]
                     ++ microbench ++ timer
    indep_libs = [ "getopt", "mdb_kernel" ]
    mkrules arch arch_cfiles arch_sfiles mackerelFiles arch_libs arch_absolute_cfiles arch_absolute_sfiles realarch_cfiles realarch_sfiles = (
        let
            opts = kernelOptions arch
            in_arch_dir f = ("arch" ./. archFamily arch) ./. f
            in_realarch_dir f = ("arch" ./. arch) ./. f
            all_cfiles = indep_cfiles ++ (map in_arch_dir arch_cfiles) ++ arch_absolute_cfiles ++ (map in_realarch_dir realarch_cfiles)
            sfiles = (map in_realarch_dir realarch_sfiles) ++ (map in_arch_dir arch_sfiles) ++ arch_absolute_sfiles
            objs = [ objectFilePath opts f | f <- (sfiles ++ all_cfiles) ]
        in
            Rules ([
                compileCFiles opts all_cfiles,
                assembleSFiles opts sfiles,
                linkKernel opts "cpu" objs (indep_libs ++ arch_libs),
                Rule ( [ Str "OBJDUMP=objdump",
                         In SrcTree "src" "/tools/gen-gdbscript.sh",
                         In SrcTree "src" "/tools/debug.gdb.in",
                         In BuildTree arch "../sbin/cpu",
                         Str ">", Out arch "/debug.gdb" 
                        ] )
             ] ++ 
             [ mackerelDependencies opts m all_cfiles | m <- mackerelFiles ]
            ))
in [
   -- x86_64
   (let sfiles = [ "boot.S", "entry.S" ]
        cfiles = ["debug.c", "gdb_arch.c", "init.c", "irq.c",
                  "startup_arch.c", "exec.c", "syscall.c", "paging.c",
                  "vmkit.c" , "page_mappings_arch.c" ] ++ microbench
        in_x86_dir f = ("arch/x86") ./. f
        x86_cFiles = [ "apic.c", "pic.c", "start_aps.c", "cmos.c", "misc.c",
                       "serial.c", "multiboot.c", "conio.c", "syscall.c", "debugregs.c",
                       "perfmon.c", "perfmon_intel.c", "perfmon_amd.c", "rtc.c", "timing.c",
                       "startup_x86.c", "mcheck.c", "ipi_notify.c" ]
        x86_sFiles = [ "init_ap_x86_64.S", "init_ap_x86_32.S" ]
        absolute_cFiles = (map in_x86_dir x86_cFiles)
        absolute_sFiles = (map in_x86_dir x86_sFiles)
        mackerelFiles = [ "lpc_pic", "pc16550d", "ia32", "amd64", 
                          "xapic", "amd_vmcb", "cpuid", "lpc_rtc" ]
        libs = [ "elf_kernel" ]
    in mkrules "x86_64" cfiles sfiles mackerelFiles libs absolute_cFiles absolute_sFiles [] []),

   -- x86_32
   (let sfiles = [ "boot.S", "entry.S", "pic.S" ]
        cfiles = ["debug.c", "gdb_arch.c", "init.c", "irq.c", "paging.c",
                  "startup_arch.c", "exec.c", "syscall.c", "page_mappings_arch.c" ] ++ microbench
        in_x86_dir f = ("arch/x86") ./. f
        x86_cFiles = [ "apic.c", "pic.c", "start_aps.c", "cmos.c", "misc.c",
                       "serial.c", "multiboot.c", "conio.c", "syscall.c", "debugregs.c",
                       "perfmon.c", "perfmon_intel.c", "perfmon_amd.c", "rtc.c", "timing.c",
                       "startup_x86.c", "ipi_notify.c" ]
        x86_sFiles = [ "init_ap_x86_64.S", "init_ap_x86_32.S" ]
        absolute_cFiles = (map in_x86_dir x86_cFiles)
        absolute_sFiles = (map in_x86_dir x86_sFiles)
        mackerelFiles = [ "lpc_pic", "pc16550d", "ia32", "amd64",
                          "xapic", "cpuid", "lpc_rtc" ]
        libs = [ "elf_kernel" ]
    in mkrules "x86_32" cfiles sfiles mackerelFiles libs absolute_cFiles absolute_sFiles [] []),

   -- scc
   (let sfiles = [ "entry.S", "pic.S" ]
        cfiles = [ "debug.c", "gdb_arch.c", "init.c", "irq.c", "paging.c",
                   "startup_arch.c", "exec.c", "syscall.c", "page_mappings_arch.c" ] ++ microbench
        arch_sfiles = [ "boot.S" ]
        arch_cfiles =
            if Config.rck_emu then
                [ "rck.c", "syscall.c" ]
            else
                [ "rck.c", "klog.c", "syscall.c" ]
        in_x86_dir f = ("arch/x86") ./. f
        x86_cFiles =
            if Config.rck_emu then
                [ "apic.c", "misc.c", "multiboot.c", "pic.c", "start_aps.c",
                  "cmos.c", "serial.c", "conio.c", "syscall.c", "debugregs.c",
                  "perfmon_intel.c", "timing.c", "startup_x86.c" ]
            else
                [ "apic.c", "misc.c", "multiboot.c", "syscall.c", "debugregs.c", "timing.c",
                  "startup_x86.c", "serial.c" ]
        x86_sFiles =
            if Config.rck_emu then
                [ "init_ap_x86_64.S", "init_ap_x86_32.S" ]
            else
                []
        indep_cFiles = (map in_x86_dir x86_cFiles)
        indep_sFiles = (map in_x86_dir x86_sFiles)
        mackerelFiles = 
            if Config.rck_emu then
                [ "pc16550d", "ia32", "xapic", "rck", "eMAC", "lpc_pic", 
                  "lpc_rtc", "cpuid" ]
            else
                [ "pc16550d", "ia32", "xapic", "rck", "eMAC", "cpuid", "lpc_rtc" ]
        libs = [ "elf_kernel" ]
    in mkrules "scc" cfiles sfiles mackerelFiles libs indep_cFiles indep_sFiles arch_cfiles arch_sfiles),

   -- arm
   (let sfiles = [ "boot.S", "exceptions.S" ]
        cfiles = [ "exn.c", "exec.c", "init.c", "integrator.c", "kludges.c", "kputchar.c", "misc.c", "pl011_uart.c", "paging.c", "phys_mmap.c", "startup_arch.c", "syscall.c" ]
        mackerelFiles = [ "arm", "arm_icp_pit", "arm_icp_pic0", "pl011_uart" ]
        libs = [ "elf", "cpio" ]
    in mkrules "arm" cfiles sfiles mackerelFiles libs [] [] [] []),
    
    -- gem5
   (let sfiles = [  ]
        cfiles = [ "exn.c", "exec.c", "init.c", "integrator.c", "kludges.c", "kputchar.c", "misc.c", "pl011_uart.c", "paging.c", "phys_mmap.c", "startup_arch.c", "syscall.c" ]
        arch_sfiles = [ "boot.S", "exceptions.S" ]
	arch_cfiles = []
	mackerelFiles = [ "arm", "arm_icp_pit", "arm_icp_pic0", "pl011_uart" ]
        libs = [ "elf", "cpio" ]
    in mkrules "gem5" cfiles sfiles mackerelFiles libs [] [] arch_cfiles arch_sfiles),
    
   -- xscale
   (let sfiles = [ "exceptions.S"  ]
        cfiles = [ "exn.c", "exec.c", "init.c", "kludges.c", "misc.c", "phys_mmap.c", "startup_arch.c", "syscall.c" ]
        arch_sfiles = [ "boot.S" ]
        arch_cfiles = [ "ixp2800_integrator.c", "ixp2800_uart.c", 
                        "ixp2800_paging.c", "kputchar.c" ]
        mackerelFiles = [ "arm", "ixp2800_icp_pit", "ixp2800_icp_pic0", 
                          "ixp2800_uart" ]
        libs = [ "elf", "cpio" ]
    in mkrules "xscale" cfiles sfiles mackerelFiles libs [] [] arch_cfiles arch_sfiles),

   -- arm11mp
   (let sfiles = [ "boot.S", "exceptions.S", "paging_cp.S" ]
        cfiles = [ "exn.c", "exec.c", "init.c", "integrator.c", "kludges.c", "kputchar.c", "misc.c", "pl011_uart.c", "paging.c", "phys_mmap.c", "startup_arch.c", "syscall.c" ]
        mackerelFiles = [ "arm", "arm_icp_pit", "arm_icp_pic0", "pl011_uart" ]
    in mkrules "arm11mp" cfiles sfiles mackerelFiles [] [] [] [] [])
  ]

/*
 * Copyright (c) 2007, 2008, 2009, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

// TODO: name dist2 instead of just dist because of name clash in THC generated enum
interface dist2 "dist2 RPC Interface" {

    alias mode uint64;

    // XXX: No flounder support for pointer values
    // Store function pointer/state ptr on client side but
    // this leads to more complex API (register/deregister)
    typedef struct {
        errval in_case;
        mode m;
        uint64 trigger;
        uint64 st;
    } trigger;

    typedef enum {BINDING_RPC, BINDING_EVENT} binding_type;


    //
    // Binding Identification
    //
    rpc get_identifier(out uint64 id);
    rpc identify(in uint64 id, in binding_type type);
    
    
    //
    // Get/Set API
    //
    
    /**
     * \param query Records to find.
     * \param t Additional trigger to watch for future events.
     * \param output Comma separated string of record names or NULL on error.
     * \param error_code Error value of request.
     */
    rpc get_names(in string query, in trigger t, out string output, out errval error_code);
    
    /**
     * \param query Record to find.
     * \param t Additional trigger to watch for future events.
     * \param output Retrieved record or NULL on error.
     * \param error_code Error value of request.
     */
    rpc get(in string query, in trigger t, out string output, out errval error_code);
        
    /**
     * \param query Record to set.
     * \param mode Set mode (see getset.h).
     * \param t Additional trigger to watch for future events.
     * \param get Return record if it has been set.
     * \param record In case get is true and no error_code is ok 
     * contains record, otherwise NULL
     * \param error_code Error value of request
     */
    rpc set(in string query, in uint64 mode, in trigger t, in bool get, out string record, out errval error_code);
    
    /**
     * \param query Record(s) to delete.
     * \param t Additional trigger to watch for future events.
     * \param error_code Error value of request
     */
    rpc del(in string query, in trigger t, out errval error_code);    
    
    /**
     * \param query
     * \param t Additional trigger to watch for future events.
     * \param error_code Error value of request.
     */
    rpc exists(in string query, in trigger t, out errval error_code);
    
    //
    // Publish/Subscribe API
    //
    
    /**
     * \param query
     * \param id Identifier for this subscription by the client.
     * \param error_code Status of request.
     */
    rpc subscribe(in string query, in uint64 id, out errval error_code);
    
    /**
     * \param id Id for the subscription
     * \param error_code Status of request
     */
    rpc unsubscribe(in uint64 id, out errval error_code);
    
    /**
     * \param record Message to publish.
     * \param error_code Status of request.
     */
    rpc publish(in string record, out errval error_code);

    
    //
    // Async Events (normally handled by 2nd binding in different thread)
    //
    message trigger(uint64 trigger_fn, uint64 state, string record);
    message subscribed_message(uint64 id, string record);    
    message watch_event(uint64 id, string record); // TODO
};

/*
 * Copyright (c) 2007, 2008, 2009, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

// TODO: name dist2 instead of just dist because of name clash in THC generated enum
interface dist2 "dist2 RPC Interface" {

    alias mode uint64;

    // XXX: No flounder support for pointers (heterogeneous cores :()
    // Store function pointer/state ptr on client side but
    // this leads to more complex API (register/deregister) triggers
    typedef struct {
        errval in_case;
        mode m;
        uint64 trigger;
        uint64 st;
    } trigger;

    typedef enum {BINDING_RPC, BINDING_EVENT} binding_type;


    //
    // Binding Identification
    //
    rpc get_identifier(out uint64 id);
    rpc identify(in uint64 id, in binding_type type);
    
    
    //
    // Get/Set API
    //
    
    // Returns the names of records matching the query as a string
    // separated by commas. In case of an error output is NULL and
    // error_code is set accordingly.
    rpc get_names(in string query, out string output, out errval error_code);
    
    // Returns a single record matching the given query.
    // In case no record or multiple records are found output is NULL and
    // error_code is set accordingly.
    // TODO remove out string error
    rpc get(in string query, out string output, out string error, out errval error_code);
    
    // Sets a record specified in the query. Mode is used to set sequential names. 
    // In case get is true the the record set record is returned.
    // trigger: watches recordname
    rpc set(in string query, in uint64 mode, in bool get, out string record, out errval error_code);
    
    // Deletes a record specified by a given query.
    // trigger: watches recordname
    rpc del(in string query, out errval error_code);
    
    // Registers a given query in the System. Return as soon as one or more
    // records for the given query exists
    rpc exists(in string query, in trigger t, out string output, out errval error_code);

    // Registers a given query in the System. Returns as soon as there are no more
    // records matching the query.
    rpc exists_not(in string query, in trigger t, out errval error_code);
    
    
    // TODO Not really needed for anything yet
    rpc watch(in string query, in uint64 mode, in binding_type type, in uint64 client_id_in,  
              out uint64 client_id_out, out uint64 watch_id, out string record, out errval error_code);
    rpc unwatch(in uint64 watch_id, out errval error_code);
    
    
    //
    // Publish/Subscribe API
    //
    rpc subscribe(in string query, in uint64 id, out errval err);
    rpc unsubscribe(in uint64 id, out errval err);
    rpc publish(in string object, out errval err);

    
    //
    // Async Events (normally handled by 2nd binding in different thread)
    //
    message trigger(uint64 trigger_fn, uint64 state, string record);
    message subscribed_message(uint64 id, string record);    
    message watch_event(uint64 id, string record); // TODO
};

/*
 * Copyright (c) 2007, 2008, 2009, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

// TODO: name dist2 instead of just dist because of name clash in THC generated enum
interface dist2 "dist2 RPC Interface" {

    alias mode uint64;

    // XXX: No flounder support for pointer values
    // Store function pointer/state ptr on client side but
    // this leads to more complex API (register/deregister)
    typedef struct {
        errval in_case;
        mode m;
        uint64 trigger;
        uint64 st;
    } trigger;

    typedef enum {BINDING_RPC, BINDING_EVENT} binding_type;


    //
    // Binding Identification
    //
    rpc get_identifier(out uint64 id);
    rpc identify(in uint64 id, in binding_type type);
    
    
    //
    // Get/Set API
    //
    
    /**
     * Returns the names of all records matching the given query.
     */
    rpc get_names(in string query, in trigger t, out string output, out errval error_code);
    
    /**
     * Tries to find a record matching the query. Trigger watches the 
     * returned record for future events.
     * TODO: Multiple Records
     * Constraint in trigger can make sense -> obj not found no exact record
     * name specified
     */
    rpc get(in string query, in trigger t, out string output, out errval error_code);
        
    /**
     * Sets a record with the given attributes. In case the record already exists the update
     * is only applied in case the constraints in query are met.
     * Trigger watches for future events on that record.
     */
    rpc set(in string query, in uint64 mode, in trigger t, in bool get, out string record, out errval error_code);
    
    /**
     * Deletes all records matching the given query.
     * Trigger watches for future events matching the query.
     */
    rpc del(in string query, in trigger t, out errval error_code);    
    
    /**
     * Evaluates a given query and returns a result.
     * An additional trigger can be set to watch for future events 
     * matching the query. 
     */
    rpc exists(in string query, in trigger t, out errval error_code);
    
    
    // TODO Not really needed for anything yet
    rpc watch(in string query, in uint64 mode, in binding_type type, in uint64 client_id_in,  
              out uint64 client_id_out, out uint64 watch_id, out string record, out errval error_code);
    rpc unwatch(in uint64 watch_id, out errval error_code);
    
    
    //
    // Publish/Subscribe API
    //
    rpc subscribe(in string query, in uint64 id, out errval err);
    rpc unsubscribe(in uint64 id, out errval err);
    rpc publish(in string object, out errval err);

    
    //
    // Async Events (normally handled by 2nd binding in different thread)
    //
    message trigger(uint64 trigger_fn, uint64 state, string record);
    message subscribed_message(uint64 id, string record);    
    message watch_event(uint64 id, string record); // TODO
};
